import{a as h,p as y,f as g}from"./index-BaXEDNP3.js";const _=e=>{const t=[];return e.patient_age&&t.push(`${e.patient_age} yrs`),e.patient_gender&&t.push(e.patient_gender),e.patient_phone&&t.push(e.patient_phone),t.join(" ‚Ä¢ ")||""},T=async(e={})=>{try{if(console.log("üîç Fetching appointment reminders with filters:",e),!e.doctor_id)throw new Error("doctor_id is required");const t={doctor_id:e.doctor_id};e.patientName?.trim()&&(t.patient_name=e.patientName.trim()),e.dateFrom&&(t.from_date=e.dateFrom),e.dateTo&&(t.to_date=e.dateTo),e.reminded!==void 0&&(t.reminded=e.reminded),console.log("üì§ Appointment API params:",t);const o=await h.get("/appointment/reminders",{params:t});if(o.data?.success){const n=o.data.data?.appointments||[];return console.log("‚úÖ Appointment reminders fetched:",n.length,"results"),{data:n,error:null}}else throw new Error(o.data?.error||"Failed to fetch appointment reminders")}catch(t){return console.error("‚ùå Appointment reminders fetch failed:",t),{data:[],error:t}}},I=async(e={})=>{try{if(console.log("üîç Fetching consultation reminders with filters:",e),!e.doctor_id)throw new Error("doctor_id is required");const t={doctor_id:e.doctor_id};e.patientName?.trim()&&(t.patient_name=e.patientName.trim()),e.dateFrom&&(t.from_date=e.dateFrom),e.dateTo&&(t.to_date=e.dateTo),e.reminded!==void 0&&(t.reminded=e.reminded),console.log("üì§ Consultation API params:",t);const o=await h.get("/consultation/reminders",{params:t});if(o.data?.success){const n=o.data.data?.consultations||[];return console.log("‚úÖ Consultation reminders fetched:",n.length,"results"),{data:n,error:null}}else throw new Error(o.data?.error||"Failed to fetch consultation reminders")}catch(t){return console.error("‚ùå Consultation reminders fetch failed:",t),{data:[],error:t}}},F=async(e={})=>{try{if(console.log("üîç Fetching treatment plan reminders with filters:",e),!e.doctor_id)throw new Error("doctor_id is required");const t={doctor_id:e.doctor_id};e.patientName?.trim()&&(t.patient_name=e.patientName.trim()),e.dateFrom&&(t.from_date=e.dateFrom),e.dateTo&&(t.to_date=e.dateTo),e.reminded!==void 0&&(t.reminded=e.reminded),console.log("üì§ Treatment plan API params:",t);const o=await h.get("/treatmentplan/reminders",{params:t});if(o.data?.success){const n=o.data.data?.treatmentPlans||[];return console.log("‚úÖ Treatment plan reminders fetched:",n.length,"results"),{data:n,error:null}}else throw new Error(o.data?.error||"Failed to fetch treatment plan reminders")}catch(t){return console.error("‚ùå Treatment plan reminders fetch failed:",t),{data:[],error:t}}},N=e=>e.map(t=>({id:`appointment-${t.id}`,originalId:t.id,type:"appointment",title:"Upcoming Appointment Reminder",patientName:t.patient_name,patientId:t.patient_id,dueDate:t.appointmentDate,dueTime:t.appointmentTime,status:t.isReminded?"completed":"pending",description:_(t),lastAppointmentDetails:C(t.last_appointment_date),details:{...t,reminderType:"appointment"}})),P=e=>e.map(t=>({id:`consultation-${t.id}`,originalId:t.id,type:"consultation",title:"Consultation Follow-Up Reminder",patientName:t.patient_name,patientId:t.patient_id,dueDate:t.followupDate,dueTime:null,status:t.isReminded?"completed":"pending",description:_(t),consultationDetails:A(t),details:{...t,reminderType:"consultation"}})),$=e=>e.map(t=>({id:`treatmentplan-${t.id}`,originalId:t.id,type:"procedures",title:"Procedure Follow-Up Reminder",patientName:t.patient_name,patientId:t.patient_id,dueDate:t.followupDate,dueTime:null,status:t.isReminded?"completed":"pending",description:_(t),procedureDetails:E(t),details:{...t,reminderType:"treatmentplan"}})),A=e=>{const t=[];return e.consultationDate&&t.push(`Followup of consultation on ${w(e.consultationDate)}`),e.diagnosis&&t.push(`Diagnosis: ${e.diagnosis}`),e.medicines_prescribed?.length>0&&t.push(`${e.medicines_prescribed.length} medicines prescribed`),e.investigations&&t.push(`Tests: ${e.investigations}`),t.join(" ‚Ä¢ ")||`Follow-up for ${e.patient_name}`},E=e=>{const t=[];if(console.log("üîç Treatment plan data for formatting:",e),e.procedures?.length>0){const o=e.procedures.filter(r=>r.status?.toLowerCase()==="ongoing").map(r=>r.procedure_name),n=e.procedures.filter(r=>r.status?.toLowerCase()==="proposed").map(r=>r.procedure_name);o.length>0&&t.push(`Ongoing: ${o.join(", ")}`),n.length>0&&t.push(`Pending: ${n.join(", ")}`),console.log("‚úÖ Ongoing procedures:",o),console.log("‚úÖ Pending procedures:",n)}else console.log("‚ùå No procedures found in treatment plan data");return t.join(" | ")||"No procedures defined"},w=e=>{if(!e)return"";try{const t=typeof e=="string"?y(e):new Date(e);return g(t,"MMM d")}catch{return e}},C=e=>!e||e===null||e===""?"No previous appointments found":`Last appointment: ${w(e)}`,v=async(e={})=>{try{if(console.log("üîç Fetching all reminders with filters:",e),!e.doctor_id)throw new Error("No doctor selected. Please select a doctor first.");const t=!e.reminderType||e.reminderType===""||e.reminderType==="appointment",o=!e.reminderType||e.reminderType===""||e.reminderType==="consultation",n=!e.reminderType||e.reminderType===""||e.reminderType==="procedures",r=[],s=[];t&&(r.push(T(e)),s.push("appointments")),o&&(r.push(I(e)),s.push("consultations")),n&&(r.push(F(e)),s.push("treatmentPlans"));const u=await Promise.allSettled(r);let c=[];const a=[];return u.forEach((d,p)=>{const i=s[p];if(d.status==="fulfilled"){const{data:m,error:f}=d.value;if(f)a.push({type:i,error:f.message||f});else{let l=[];i==="appointments"?l=N(m):i==="consultations"?l=P(m):i==="treatmentPlans"&&(l=$(m)),c=c.concat(l)}}else a.push({type:i,error:d.reason?.message||"Unknown error"})}),c.sort((d,p)=>{const i=new Date(d.dueDate+(d.dueTime?` ${d.dueTime}`:"")),m=new Date(p.dueDate+(p.dueTime?` ${p.dueTime}`:""));return i-m}),console.log("‚úÖ All reminders fetched:",c.length,"total results"),a.length>0&&console.warn("‚ö†Ô∏è Partial errors occurred:",a),{data:c,error:a.length===r.length?"All reminder types failed to load":null,partialErrors:a}}catch(t){return console.error("‚ùå All reminders fetch failed:",t),{data:[],error:t.message||"Failed to fetch reminders",partialErrors:[]}}},b=async(e,t,o,n=null)=>{try{console.log(`üîÑ Updating ${e} reminder status:`,{id:t,isReminded:o});let r,s={isReminded:o};switch(e){case"appointment":r=`/appointment/${t}`,n&&(s={patientId:n.patientId||n.patient_id,doctorId:n.doctorId||n.doctor_id,clinicId:n.clinicId||n.clinic_id||1,status:n.status||"waiting",category:n.category||"scheduled",type:n.type||"consultation",appointmentDate:n.appointmentDate,appointmentTime:n.appointmentTime,isReminded:o},console.log("üîç Mapped appointment fields:",{patientId:n.patientId||n.patient_id,doctorId:n.doctorId||n.doctor_id,clinicId:n.clinicId||n.clinic_id,category:n.category,available_fields:Object.keys(n)}));break;case"consultation":r=`/consultation/${t}`,n&&(s={patientId:n.patientId||n.patient_id,status:n.status,consultationDate:n.consultationDate,patientNotes:n.patientNotes||"",doctorNotes:n.doctorNotes||"",diagnosis:n.diagnosis||"",instructions:n.instructions||"",investigations:n.investigations||"",clinicalNotes:n.clinicalNotes||"",followupDate:n.followupDate,isReminded:o});break;case"treatmentplan":r=`/treatmentplan/${t}`,n&&(s={patientId:n.patientId||n.patient_id,doctorId:n.doctorId||n.doctor_id,treatmentPlanName:n.treatmentPlanName,status:n.status,followupDate:n.followupDate,isReminded:o});break;default:throw new Error(`Invalid reminder type: ${e}`)}console.log("üì§ Update payload:",s);const u=await h.put(r,s);if(u.data?.success)return console.log("‚úÖ Reminder status updated successfully"),{success:!0,error:null};throw new Error(u.data?.error||"Failed to update reminder status")}catch(r){return console.error("‚ùå Reminder status update failed:",r),{success:!1,error:r.message||"Failed to update reminder status"}}};export{v as fetchAllReminders,T as fetchAppointmentReminders,I as fetchConsultationReminders,F as fetchTreatmentPlanReminders,b as updateReminderStatus};
