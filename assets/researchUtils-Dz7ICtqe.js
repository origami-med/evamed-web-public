import{a as o}from"./index-BaXEDNP3.js";const n=async(e={})=>{try{if(console.log("🔍 Fetching research data with filters:",e),!e.doctor_id)throw new Error("doctor_id is required");const a={};e.diagnosis&&(typeof e.diagnosis=="string"&&e.diagnosis.trim()?a.diagnosis=e.diagnosis.trim():e.diagnosis?.diagnosisName&&(a.diagnosis=e.diagnosis.diagnosisName.trim())),e.medicine&&(typeof e.medicine=="string"&&e.medicine.trim()?a.medicine=e.medicine.trim():e.medicine?.productName&&(a.medicine=e.medicine.productName.trim())),e.dateFrom&&(a.dateFrom=e.dateFrom),e.dateTo&&(a.dateTo=e.dateTo),e.patientName?.trim()&&(a.patientName=e.patientName.trim()),e.gender?.trim()&&(a.gender=e.gender.trim()),e.ageGreaterThan&&(a.ageGreaterThan=e.ageGreaterThan),e.ageLessThan&&(a.ageLessThan=e.ageLessThan),a.doctor_id=e.doctor_id,console.log("📡 Research API params:",a),console.log("📡 Original filters received:",e);const r=await o.get("/research/search",{params:a});return console.log("📊 Research API response:",r.data),{data:r.data.data||[],error:null}}catch(a){return console.error("❌ Error fetching research data:",a),a.response?.status===404?{data:[],error:{message:"No research data found for the specified criteria",type:"not_found"}}:a.response?.status===400?{data:[],error:{message:a.response.data?.error||"Invalid search parameters",type:"validation_error"}}:{data:[],error:{message:a.message||"Failed to fetch research data",type:"network_error"}}}};export{n as fetchResearchData};
